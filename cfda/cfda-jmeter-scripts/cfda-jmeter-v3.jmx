<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="Set URL" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="script">sampler.setProtocol(&quot;https&quot;);
sampler.setDomain(props.get(&quot;url&quot;));
sampler.setPath(sampler.getPath() + &quot;?api_key=&quot; + props.get(&quot;api_key&quot;));</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <stringProp name="CookieManager.policy">standard</stringProp>
        <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
      </CookieManager>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504726051000</longProp>
        <longProp name="ThreadGroup.end_time">1504726051000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Define Users" enabled="true">
          <stringProp name="BeanShellSampler.query">String[] users = {&quot;agency_submitter&quot;, &quot;superuser&quot;, &quot;agency_coord&quot;};
props.put(&quot;users&quot;, users);

int counter = 1;
for (String user : props.get(&quot;users&quot;)) {
	vars.put(&quot;user_&quot; + counter++, user);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="For each (user)" enabled="true">
          <stringProp name="ForeachController.inputVal">user</stringProp>
          <stringProp name="ForeachController.returnVal">currentUser</stringProp>
          <boolProp name="ForeachController.useSeparator">true</boolProp>
        </ForeachController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;service&quot;:&quot;LDAPandHOTP&quot;, &quot;username&quot;:&quot;${__P(${currentUser}_username)}&quot;,&quot;password&quot;:&quot;${__P(password)}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">iam/auth/v3/session</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Auth Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">authId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.authnResponse.authId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Set Dev OTP" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">vars.put(&quot;otp&quot;, props.get(vars.get(&quot;currentUser&quot;) + &quot;_username&quot;))</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Token Id" enabled="false">
              <stringProp name="JSONPostProcessor.referenceNames">tokenId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.authnResponse.tokenId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If (BSP)" enabled="true">
            <stringProp name="IfController.condition">&quot;${__P(env)}&quot; !== &quot;dev&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Get Gmail OTP" enabled="true">
              <stringProp name="BeanShellSampler.query">GmailQuickstart gmail = new GmailQuickstart();
String token = gmail.getLatestOTP();
vars.put(&quot;otp&quot;, token);
ResponseMessage = token;</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OTP Request" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;service&quot;:&quot;LDAPandHOTP&quot;,&quot;stage&quot;:&quot;HOTP2&quot;,&quot;otp&quot;:&quot;${otp}&quot;,&quot;authId&quot;:&quot;${authId}&quot;,&quot;otppreference&quot;:&quot;email&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">iam/auth/v3/session</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Token Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">tokenId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.authnResponse.tokenId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Store User Token" enabled="true">
            <stringProp name="BeanShellSampler.query">props.put(&quot;${currentUser}&quot; + &quot;_login_token&quot;, &quot;${tokenId}&quot;);</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Progam API - CRUD Only" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">200</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504725563000</longProp>
        <longProp name="ThreadGroup.end_time">1504725563000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Define Users" enabled="true">
          <stringProp name="BeanShellSampler.query">int counter = 1;
for (String user : props.get(&quot;users&quot;)) {
	vars.put(&quot;user_&quot; + counter++, user);
}

int random = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, counter-1);
vars.put(&quot;currentUser&quot;, props.get(&quot;users&quot;)[random]);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If (logged in)" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(${currentUser}_login_token)}&quot; != null</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Auth-Token Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Auth-Token</stringProp>
                <stringProp name="Header.value">${__P(${currentUser}_login_token)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create FAL - ${currentUser}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;programNumber&quot;: &quot;&quot;,&#xd;
    &quot;title&quot;: &quot;JMeter Test&quot;,&#xd;
    &quot;alternativeNames&quot;: [&#xd;
      &quot;&quot;&#xd;
    ],&#xd;
    &quot;relatedPrograms&quot;: [],&#xd;
    &quot;organizationId&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;additionalInfo&quot;: {&#xd;
    &quot;sections&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;header-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">programId</stringProp>
              <stringProp name="RegexExtractor.regex">.*</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Read FAL - ${currentUser}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Org Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">orgId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organizationId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update FAL - ${currentUser}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;title&quot;: &quot;sfdsf&quot;,&#xd;
    &quot;website&quot;: &quot;&quot;,&#xd;
    &quot;contacts&quot;: {&#xd;
      &quot;local&quot;: {&#xd;
        &quot;flag&quot;: &quot;none&quot;,&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;headquarters&quot;: [&#xd;
        {&#xd;
          &quot;fax&quot;: &quot;&quot;,&#xd;
          &quot;zip&quot;: &quot;30333&quot;,&#xd;
          &quot;city&quot;: &quot;Atlanta&quot;,&#xd;
          &quot;email&quot;: &quot;eow1@cdc.gov&quot;,&#xd;
          &quot;phone&quot;: &quot;1234567890&quot;,&#xd;
          &quot;state&quot;: &quot;GA&quot;,&#xd;
          &quot;title&quot;: &quot;&quot;,&#xd;
          &quot;country&quot;: &quot;US&quot;,&#xd;
          &quot;fullName&quot;: &quot;Elizabeth Wolfe&quot;,&#xd;
          &quot;contactId&quot;: &quot;4fa4109f4e4864fa3c016836ecd648e4&quot;,&#xd;
          &quot;streetAddress&quot;: &quot;1600 Clifton Road, NE, Mailstop E-07&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;projects&quot;: {&#xd;
      &quot;list&quot;: [],&#xd;
      &quot;isApplicable&quot;: true&#xd;
    },&#xd;
    &quot;financial&quot;: {&#xd;
      &quot;accounts&quot;: [&#xd;
        {&#xd;
          &quot;code&quot;: &quot;22-2222-2-2-222&quot;,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;treasury&quot;: {&#xd;
        &quot;tafs&quot;: [&#xd;
          {&#xd;
            &quot;fy1&quot;: &quot;&quot;,&#xd;
            &quot;fy2&quot;: &quot;&quot;,&#xd;
            &quot;accountCode&quot;: &quot;4444&quot;,&#xd;
            &quot;departmentCode&quot;: &quot;44&quot;,&#xd;
            &quot;subAccountCode&quot;: &quot;&quot;,&#xd;
            &quot;allocationTransferAgency&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      &quot;obligations&quot;: [&#xd;
        {&#xd;
          &quot;values&quot;: [&#xd;
            {&#xd;
              &quot;year&quot;: 2016,&#xd;
              &quot;actual&quot;: null&#xd;
            },&#xd;
            {&#xd;
              &quot;year&quot;: 2017,&#xd;
              &quot;estimate&quot;: null&#xd;
            },&#xd;
            {&#xd;
              &quot;year&quot;: 2018,&#xd;
              &quot;estimate&quot;: null&#xd;
            }&#xd;
          ],&#xd;
          &quot;description&quot;: null,&#xd;
          &quot;obligationId&quot;: &quot;6d53e4d0a9fabb5bac7996d6b675de5a&quot;,&#xd;
          &quot;isRecoveryAct&quot;: true,&#xd;
          &quot;assistanceType&quot;: &quot;0001001&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;accomplishments&quot;: {&#xd;
        &quot;list&quot;: [],&#xd;
        &quot;isApplicable&quot;: false&#xd;
      }&#xd;
    },&#xd;
    &quot;objective&quot;: &quot;dsf&quot;,&#xd;
    &quot;assistance&quot;: {&#xd;
      &quot;appeal&quot;: {&#xd;
        &quot;interval&quot;: &quot;5&quot;&#xd;
      },&#xd;
      &quot;renewal&quot;: {&#xd;
        &quot;interval&quot;: &quot;4&quot;&#xd;
      },&#xd;
      &quot;approval&quot;: {&#xd;
        &quot;interval&quot;: &quot;3&quot;&#xd;
      },&#xd;
      &quot;deadlines&quot;: {&#xd;
        &quot;flag&quot;: &quot;no&quot;,&#xd;
        &quot;list&quot;: []&#xd;
      },&#xd;
      &quot;awardProcedure&quot;: {&#xd;
        &quot;description&quot;: &quot;dsfdsf&quot;&#xd;
      },&#xd;
      &quot;selectionCriteria&quot;: {},&#xd;
      &quot;applicationProcedure&quot;: {},&#xd;
      &quot;preApplicationCoordination&quot;: {&#xd;
        &quot;environmentalImpact&quot;: {&#xd;
          &quot;reports&quot;: []&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;compliance&quot;: {&#xd;
      &quot;audit&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;records&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;reports&quot;: [&#xd;
        {&#xd;
          &quot;code&quot;: &quot;program&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;cash&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;progress&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;expenditure&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;performanceMonitoring&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;documents&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;CFR200Requirements&quot;: {&#xd;
        &quot;questions&quot;: [&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartB&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartC&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartD&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartE&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartF&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          }&#xd;
        ],&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;formulaAndMatching&quot;: {&#xd;
        &quot;moe&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        &quot;types&quot;: {&#xd;
          &quot;moe&quot;: false,&#xd;
          &quot;formula&quot;: false,&#xd;
          &quot;matching&quot;: false&#xd;
        },&#xd;
        &quot;formula&quot;: {&#xd;
          &quot;part&quot;: &quot;&quot;,&#xd;
          &quot;title&quot;: &quot;&quot;,&#xd;
          &quot;chapter&quot;: &quot;&quot;,&#xd;
          &quot;subPart&quot;: &quot;&quot;,&#xd;
          &quot;publicLaw&quot;: &quot;&quot;,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        &quot;matching&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;fiscalYear&quot;: 2017,&#xd;
    &quot;description&quot;: &quot;&quot;,&#xd;
    &quot;eligibility&quot;: {&#xd;
      &quot;usage&quot;: {&#xd;
        &quot;loanTerms&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        },&#xd;
        &quot;restrictions&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        },&#xd;
        &quot;discretionaryFund&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        }&#xd;
      },&#xd;
      &quot;applicant&quot;: {&#xd;
        &quot;types&quot;: [&#xd;
          &quot;0001&quot;,&#xd;
          &quot;0005&quot;&#xd;
        ]&#xd;
      },&#xd;
      &quot;limitation&quot;: {&#xd;
        &quot;awarded&quot;: &quot;letter&quot;,&#xd;
        &quot;description&quot;: &quot;dsfds&quot;&#xd;
      },&#xd;
      &quot;beneficiary&quot;: {&#xd;
        &quot;types&quot;: [],&#xd;
        &quot;isSameAsApplicant&quot;: true&#xd;
      },&#xd;
      &quot;documentation&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;assistanceUsage&quot;: {&#xd;
        &quot;types&quot;: [&#xd;
          &quot;1&quot;&#xd;
        ],&#xd;
        &quot;description&quot;: &quot;dsfdsf&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;subjectTerms&quot;: [&#xd;
      &quot;0019003&quot;&#xd;
    ],&#xd;
    &quot;programNumber&quot;: null,&#xd;
    &quot;authorizations&quot;: {&#xd;
      &quot;list&quot;: [&#xd;
        {&#xd;
          &quot;USC&quot;: {&#xd;
            &quot;title&quot;: &quot;3&quot;,&#xd;
            &quot;section&quot;: &quot;32&quot;&#xd;
          },&#xd;
          &quot;act&quot;: null,&#xd;
          &quot;statute&quot;: null,&#xd;
          &quot;publicLaw&quot;: null,&#xd;
          &quot;executiveOrder&quot;: null,&#xd;
          &quot;authorizationId&quot;: &quot;8f8c3bc85982e57a8e1bb78c40154de9&quot;,&#xd;
          &quot;authorizationTypes&quot;: {&#xd;
            &quot;USC&quot;: true,&#xd;
            &quot;act&quot;: null,&#xd;
            &quot;statute&quot;: null,&#xd;
            &quot;publicLaw&quot;: null,&#xd;
            &quot;executiveOrder&quot;: null&#xd;
          },&#xd;
          &quot;parentAuthorizationId&quot;: null&#xd;
        }&#xd;
      ],&#xd;
      &quot;description&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;organizationId&quot;: ${orgId},&#xd;
    &quot;functionalCodes&quot;: [&#xd;
      &quot;0001001&quot;&#xd;
    ],&#xd;
    &quot;relatedPrograms&quot;: [],&#xd;
    &quot;alternativeNames&quot;: [&#xd;
      &quot;Test&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;additionalInfo&quot;: {&#xd;
    &quot;sections&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;header-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;overview&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;authorization&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;financial-information-obligations&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;financial-information-other&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;criteria-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;applying-for-assistance&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;compliance-requirements&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;contact-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
            <stringProp name="HTTPSampler.method">PATCH</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete FAL - ${currentUser}" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">jmeter_crud_results.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Log Errors Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">true</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">jmeter_crud_errors.xml</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test Progam API" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">16</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">10</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504725563000</longProp>
        <longProp name="ThreadGroup.end_time">1504725563000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Define Users" enabled="true">
          <stringProp name="BeanShellSampler.query">int counter = 1;
for (String user : props.get(&quot;users&quot;)) {
	vars.put(&quot;user_&quot; + counter++, user);
}

int random = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, counter-1);
vars.put(&quot;currentUser&quot;, props.get(&quot;users&quot;)[random]);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If (logged in)" enabled="true">
          <stringProp name="IfController.condition">&quot;${__P(${currentUser}_login_token)}&quot; != null</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="X-Auth-Token Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Auth-Token</stringProp>
                <stringProp name="Header.value">${__P(${currentUser}_login_token)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FAL Workspace" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Permissions - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="permissions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">FAL_LISTING,%20CREATE_FALS,%20FAL_REQUESTS,%20CREATE_RAO</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">permissions</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Org Permissions - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="permissions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">ORG_LEVELS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">permissions</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List All Programs - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="keyword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyword</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="includeCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">includeCount</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                  </elementProp>
                  <elementProp name="sortBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">programNumber</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortBy</stringProp>
                  </elementProp>
                  <elementProp name="postedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedFrom</stringProp>
                  </elementProp>
                  <elementProp name="postedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedTo</stringProp>
                  </elementProp>
                  <elementProp name="modifiedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedFrom</stringProp>
                  </elementProp>
                  <elementProp name="modifiedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedTo</stringProp>
                  </elementProp>
                  <elementProp name="organizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">organizationId</stringProp>
                  </elementProp>
                  <elementProp name="requestType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestType</stringProp>
                  </elementProp>
                  <elementProp name="facets" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">status, pendingChangeRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">facets</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List All Programs - No Sort - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="keyword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyword</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="includeCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">includeCount</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                  </elementProp>
                  <elementProp name="sortBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortBy</stringProp>
                  </elementProp>
                  <elementProp name="postedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedFrom</stringProp>
                  </elementProp>
                  <elementProp name="postedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedTo</stringProp>
                  </elementProp>
                  <elementProp name="modifiedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedFrom</stringProp>
                  </elementProp>
                  <elementProp name="modifiedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedTo</stringProp>
                  </elementProp>
                  <elementProp name="organizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">organizationId</stringProp>
                  </elementProp>
                  <elementProp name="requestType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestType</stringProp>
                  </elementProp>
                  <elementProp name="facets" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">status, pendingChangeRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">facets</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Published Programs - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="keyword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyword</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">published</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="includeCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">includeCount</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                  </elementProp>
                  <elementProp name="sortBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">programNumber</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortBy</stringProp>
                  </elementProp>
                  <elementProp name="postedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedFrom</stringProp>
                  </elementProp>
                  <elementProp name="postedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedTo</stringProp>
                  </elementProp>
                  <elementProp name="modifiedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedFrom</stringProp>
                  </elementProp>
                  <elementProp name="modifiedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedTo</stringProp>
                  </elementProp>
                  <elementProp name="organizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">organizationId</stringProp>
                  </elementProp>
                  <elementProp name="requestType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestType</stringProp>
                  </elementProp>
                  <elementProp name="facets" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">status, pendingChangeRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">facets</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List Published Programs - No Sort - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="keyword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyword</stringProp>
                  </elementProp>
                  <elementProp name="page" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">page</stringProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">published</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                  </elementProp>
                  <elementProp name="includeCount" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">includeCount</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                  </elementProp>
                  <elementProp name="sortBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">sortBy</stringProp>
                  </elementProp>
                  <elementProp name="postedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedFrom</stringProp>
                  </elementProp>
                  <elementProp name="postedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">postedTo</stringProp>
                  </elementProp>
                  <elementProp name="modifiedFrom" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedFrom</stringProp>
                  </elementProp>
                  <elementProp name="modifiedTo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">modifiedTo</stringProp>
                  </elementProp>
                  <elementProp name="organizationId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">organizationId</stringProp>
                  </elementProp>
                  <elementProp name="requestType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">requestType</stringProp>
                  </elementProp>
                  <elementProp name="facets" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">status, pendingChangeRequest</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">facets</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Request Count - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/programRequests/reports/requestCount/pending</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create FAL" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Check Create Permissions - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="permissions" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">CREATE_FALS</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">permissions</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/permissions</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create New FAL - ${currentUser}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;programNumber&quot;: &quot;&quot;,&#xd;
    &quot;title&quot;: &quot;JMeter Test&quot;,&#xd;
    &quot;alternativeNames&quot;: [&#xd;
      &quot;&quot;&#xd;
    ],&#xd;
    &quot;relatedPrograms&quot;: [],&#xd;
    &quot;organizationId&quot;: &quot;&quot;&#xd;
  },&#xd;
  &quot;additionalInfo&quot;: {&#xd;
    &quot;sections&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;header-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">programId</stringProp>
                <stringProp name="RegexExtractor.regex">.*</stringProp>
                <stringProp name="RegexExtractor.template">$0$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Review FAL" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Dictionaries - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ids" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.value">program_subject_terms,match_percent,assistance_type,applicant_types,assistance_usage_types,beneficiary_types,functional_codes,cfr200_requirements</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">ids</stringProp>
                  </elementProp>
                  <elementProp name="size" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">size</stringProp>
                  </elementProp>
                  <elementProp name="filterElementIds" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">filterElementIds</stringProp>
                  </elementProp>
                  <elementProp name="keyword" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">keyword</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/dictionaries</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get FAL - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Org Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">orgId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.organizationId</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get FH Configuration - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/federalHierarchyConfigurations/${orgId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Historical Index - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="programNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">programNumber</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/historicalIndexes/${programId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Action History - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}/actionHistoryAndNote</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Update FAL" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Patch FAL - ${currentUser}" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;data&quot;: {&#xd;
    &quot;title&quot;: &quot;sfdsf&quot;,&#xd;
    &quot;website&quot;: &quot;&quot;,&#xd;
    &quot;contacts&quot;: {&#xd;
      &quot;local&quot;: {&#xd;
        &quot;flag&quot;: &quot;none&quot;,&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;headquarters&quot;: [&#xd;
        {&#xd;
          &quot;fax&quot;: &quot;&quot;,&#xd;
          &quot;zip&quot;: &quot;30333&quot;,&#xd;
          &quot;city&quot;: &quot;Atlanta&quot;,&#xd;
          &quot;email&quot;: &quot;eow1@cdc.gov&quot;,&#xd;
          &quot;phone&quot;: &quot;1234567890&quot;,&#xd;
          &quot;state&quot;: &quot;GA&quot;,&#xd;
          &quot;title&quot;: &quot;&quot;,&#xd;
          &quot;country&quot;: &quot;US&quot;,&#xd;
          &quot;fullName&quot;: &quot;Elizabeth Wolfe&quot;,&#xd;
          &quot;contactId&quot;: &quot;4fa4109f4e4864fa3c016836ecd648e4&quot;,&#xd;
          &quot;streetAddress&quot;: &quot;1600 Clifton Road, NE, Mailstop E-07&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;projects&quot;: {&#xd;
      &quot;list&quot;: [],&#xd;
      &quot;isApplicable&quot;: true&#xd;
    },&#xd;
    &quot;financial&quot;: {&#xd;
      &quot;accounts&quot;: [&#xd;
        {&#xd;
          &quot;code&quot;: &quot;22-2222-2-2-222&quot;,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;treasury&quot;: {&#xd;
        &quot;tafs&quot;: [&#xd;
          {&#xd;
            &quot;fy1&quot;: &quot;&quot;,&#xd;
            &quot;fy2&quot;: &quot;&quot;,&#xd;
            &quot;accountCode&quot;: &quot;4444&quot;,&#xd;
            &quot;departmentCode&quot;: &quot;44&quot;,&#xd;
            &quot;subAccountCode&quot;: &quot;&quot;,&#xd;
            &quot;allocationTransferAgency&quot;: &quot;&quot;&#xd;
          }&#xd;
        ]&#xd;
      },&#xd;
      &quot;obligations&quot;: [&#xd;
        {&#xd;
          &quot;values&quot;: [&#xd;
            {&#xd;
              &quot;year&quot;: 2016,&#xd;
              &quot;actual&quot;: null&#xd;
            },&#xd;
            {&#xd;
              &quot;year&quot;: 2017,&#xd;
              &quot;estimate&quot;: null&#xd;
            },&#xd;
            {&#xd;
              &quot;year&quot;: 2018,&#xd;
              &quot;estimate&quot;: null&#xd;
            }&#xd;
          ],&#xd;
          &quot;description&quot;: null,&#xd;
          &quot;obligationId&quot;: &quot;6d53e4d0a9fabb5bac7996d6b675de5a&quot;,&#xd;
          &quot;isRecoveryAct&quot;: true,&#xd;
          &quot;assistanceType&quot;: &quot;0001001&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;accomplishments&quot;: {&#xd;
        &quot;list&quot;: [],&#xd;
        &quot;isApplicable&quot;: false&#xd;
      }&#xd;
    },&#xd;
    &quot;objective&quot;: &quot;dsf&quot;,&#xd;
    &quot;assistance&quot;: {&#xd;
      &quot;appeal&quot;: {&#xd;
        &quot;interval&quot;: &quot;5&quot;&#xd;
      },&#xd;
      &quot;renewal&quot;: {&#xd;
        &quot;interval&quot;: &quot;4&quot;&#xd;
      },&#xd;
      &quot;approval&quot;: {&#xd;
        &quot;interval&quot;: &quot;3&quot;&#xd;
      },&#xd;
      &quot;deadlines&quot;: {&#xd;
        &quot;flag&quot;: &quot;no&quot;,&#xd;
        &quot;list&quot;: []&#xd;
      },&#xd;
      &quot;awardProcedure&quot;: {&#xd;
        &quot;description&quot;: &quot;dsfdsf&quot;&#xd;
      },&#xd;
      &quot;selectionCriteria&quot;: {},&#xd;
      &quot;applicationProcedure&quot;: {},&#xd;
      &quot;preApplicationCoordination&quot;: {&#xd;
        &quot;environmentalImpact&quot;: {&#xd;
          &quot;reports&quot;: []&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;compliance&quot;: {&#xd;
      &quot;audit&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;records&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;reports&quot;: [&#xd;
        {&#xd;
          &quot;code&quot;: &quot;program&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;cash&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;progress&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;expenditure&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;code&quot;: &quot;performanceMonitoring&quot;,&#xd;
          &quot;isSelected&quot;: false,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;documents&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;CFR200Requirements&quot;: {&#xd;
        &quot;questions&quot;: [&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartB&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartC&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartD&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartE&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          },&#xd;
          {&#xd;
            &quot;code&quot;: &quot;subpartF&quot;,&#xd;
            &quot;isSelected&quot;: false&#xd;
          }&#xd;
        ],&#xd;
        &quot;description&quot;: &quot;&quot;&#xd;
      },&#xd;
      &quot;formulaAndMatching&quot;: {&#xd;
        &quot;moe&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        &quot;types&quot;: {&#xd;
          &quot;moe&quot;: false,&#xd;
          &quot;formula&quot;: false,&#xd;
          &quot;matching&quot;: false&#xd;
        },&#xd;
        &quot;formula&quot;: {&#xd;
          &quot;part&quot;: &quot;&quot;,&#xd;
          &quot;title&quot;: &quot;&quot;,&#xd;
          &quot;chapter&quot;: &quot;&quot;,&#xd;
          &quot;subPart&quot;: &quot;&quot;,&#xd;
          &quot;publicLaw&quot;: &quot;&quot;,&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        },&#xd;
        &quot;matching&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;&#xd;
        }&#xd;
      }&#xd;
    },&#xd;
    &quot;fiscalYear&quot;: 2017,&#xd;
    &quot;description&quot;: &quot;&quot;,&#xd;
    &quot;eligibility&quot;: {&#xd;
      &quot;usage&quot;: {&#xd;
        &quot;loanTerms&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        },&#xd;
        &quot;restrictions&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        },&#xd;
        &quot;discretionaryFund&quot;: {&#xd;
          &quot;description&quot;: &quot;&quot;,&#xd;
          &quot;isApplicable&quot;: false&#xd;
        }&#xd;
      },&#xd;
      &quot;applicant&quot;: {&#xd;
        &quot;types&quot;: [&#xd;
          &quot;0001&quot;,&#xd;
          &quot;0005&quot;&#xd;
        ]&#xd;
      },&#xd;
      &quot;limitation&quot;: {&#xd;
        &quot;awarded&quot;: &quot;letter&quot;,&#xd;
        &quot;description&quot;: &quot;dsfds&quot;&#xd;
      },&#xd;
      &quot;beneficiary&quot;: {&#xd;
        &quot;types&quot;: [],&#xd;
        &quot;isSameAsApplicant&quot;: true&#xd;
      },&#xd;
      &quot;documentation&quot;: {&#xd;
        &quot;description&quot;: &quot;&quot;,&#xd;
        &quot;isApplicable&quot;: false&#xd;
      },&#xd;
      &quot;assistanceUsage&quot;: {&#xd;
        &quot;types&quot;: [&#xd;
          &quot;1&quot;&#xd;
        ],&#xd;
        &quot;description&quot;: &quot;dsfdsf&quot;&#xd;
      }&#xd;
    },&#xd;
    &quot;subjectTerms&quot;: [&#xd;
      &quot;0019003&quot;&#xd;
    ],&#xd;
    &quot;programNumber&quot;: null,&#xd;
    &quot;authorizations&quot;: {&#xd;
      &quot;list&quot;: [&#xd;
        {&#xd;
          &quot;USC&quot;: {&#xd;
            &quot;title&quot;: &quot;3&quot;,&#xd;
            &quot;section&quot;: &quot;32&quot;&#xd;
          },&#xd;
          &quot;act&quot;: null,&#xd;
          &quot;statute&quot;: null,&#xd;
          &quot;publicLaw&quot;: null,&#xd;
          &quot;executiveOrder&quot;: null,&#xd;
          &quot;authorizationId&quot;: &quot;8f8c3bc85982e57a8e1bb78c40154de9&quot;,&#xd;
          &quot;authorizationTypes&quot;: {&#xd;
            &quot;USC&quot;: true,&#xd;
            &quot;act&quot;: null,&#xd;
            &quot;statute&quot;: null,&#xd;
            &quot;publicLaw&quot;: null,&#xd;
            &quot;executiveOrder&quot;: null&#xd;
          },&#xd;
          &quot;parentAuthorizationId&quot;: null&#xd;
        }&#xd;
      ],&#xd;
      &quot;description&quot;: &quot;&quot;&#xd;
    },&#xd;
    &quot;organizationId&quot;: ${orgId},&#xd;
    &quot;functionalCodes&quot;: [&#xd;
      &quot;0001001&quot;&#xd;
    ],&#xd;
    &quot;relatedPrograms&quot;: [],&#xd;
    &quot;alternativeNames&quot;: [&#xd;
      &quot;Test&quot;&#xd;
    ]&#xd;
  },&#xd;
  &quot;additionalInfo&quot;: {&#xd;
    &quot;sections&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;header-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;overview&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;authorization&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;financial-information-obligations&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;financial-information-other&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;criteria-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;applying-for-assistance&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;compliance-requirements&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      },&#xd;
      {&#xd;
        &quot;id&quot;: &quot;contact-information&quot;,&#xd;
        &quot;status&quot;: &quot;updated&quot;&#xd;
      }&#xd;
    ]&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
              <stringProp name="HTTPSampler.method">PATCH</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Content-Type JSON" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Updated FAL - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Title" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">programTitle</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.title</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete FAL" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete FAL - ${currentUser}" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">fac/v1/programs/${programId}</stringProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">jmeter_full_results.csv</stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Log Errors Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">true</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>true</responseData>
                <samplerData>false</samplerData>
                <xml>true</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>true</responseHeaders>
                <requestHeaders>true</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename">jmeter_full_errors.xml</stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySamplerProperties">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugPostProcessor>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Login" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1504726167000</longProp>
        <longProp name="ThreadGroup.end_time">1504726167000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Reset properties" enabled="true">
          <stringProp name="BeanShellSampler.query">for (String user : props.get(&quot;users&quot;)) {
	props.put(user + &quot;_login_token&quot;, &quot;&quot;);
}
ResponseMessage = &quot;&quot;</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
